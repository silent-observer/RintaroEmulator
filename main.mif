DEPTH = 1024;
WIDTH = 16;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
-- "main3.rcpu"
000: 0805 0001 1000 0200 ;     --   3:     mov 1, board[0] ; X__
004: 0005 1000 0201 ;          --   4:     mov 0, board[1] ; ___
007: 0005 1000 0202 ;          --   5:     mov 0, board[2] ; ___
00a: 0005 1000 0203 ;          --   6:     mov 0, board[3]
00d: 0005 1000 0204 ;          --   7:     mov 0, board[4]
010: 0005 1000 0205 ;          --   8:     mov 0, board[5]
013: 0005 1000 0206 ;          --   9:     mov 0, board[6]
016: 0005 1000 0207 ;          --  10:     mov 0, board[7]
019: 0005 1000 0208 ;          --  11:     mov 0, board[8]
01c: 3000 ;                    --  13:     push 0
01d: 3800 0002 ;               --  14:     push 2
01f: 3800 0200 ;               --  15:     push board.l
021: 3800 1000 ;               --  16:     push board.h
023: 3100 ;                    --  17:     call tictactoe_minimax
024: 80b6 ;                    --  17:     call tictactoe_minimax
025: 4004 ;                    --  18:     addi SP, 4, SP
026: 0a02 1000 0000 ;          --  19:     mov *choice, B
029: 8029 ;                    --  20:     halt
-- "tictactoe.rcpu"
02a: 3800 0001 ;               --   2:     push 1
02c: 3e00 0005 ;               --   3:     push [5]
02e: 3e00 0004 ;               --   4:     push [4]
030: 3100 ;                    --   5:     call tictactoe_testWin
031: 804b ;                    --   5:     call tictactoe_testWin
032: 4003 ;                    --   6:     addi SP, 3, SP
033: 0200 ;                    --   7:     mov A, 0
034: 2a05 ;                    --   8:     jez tictactoe_scoreGame_notXWin
035: 0e01 0006 ;               --   9:     mov [6], A
037: 0849 000a ;               --  10:     sub 10, A, A
039: 3180 ;                    --  11:     ret
03a: 3800 0002 ;               --  13:     push 2
03c: 3e00 0005 ;               --  14:     push [5]
03e: 3e00 0004 ;               --  15:     push [4]
040: 3100 ;                    --  16:     call tictactoe_testWin
041: 804b ;                    --  16:     call tictactoe_testWin
042: 4003 ;                    --  17:     addi SP, 3, SP
043: 0200 ;                    --  18:     mov A, 0
044: 2a04 ;                    --  19:     jez tictactoe_scoreGame_notOWin
045: 0e01 0006 ;               --  20:     mov [6], A
047: 42f6 ;                    --  21:     addi A, -10, A
048: 3180 ;                    --  22:     ret
049: 0001 ;                    --  24:     mov 0, A
04a: 3180 ;                    --  25:     ret
04b: 2f80 0004 ;               --  29:     save [4], @0
04d: 0002 ;                    --  31:     mov 0, B
04e: 0003 ;                    --  34:     mov 0, C
04f: 08b1 0003 ;               --  37:     mll 3, B, A
051: 0219 ;                    --  38:     add A, C, A
052: 0e09 0005 ;               --  39:     add [5], A, A
054: 0c01 ;                    --  40:     mov *A, A
055: 0e49 0006 ;               --  41:     sub [6], A, A
057: 2207 ;                    --  42:     jnz tictactoe_testWin_for2_end
058: 6602 ;                    --  44:     subi C, 2, C
059: 2a02 ;                    --  45:     jez tictactoe_testWin_retTrue
05a: 4603 ;                    --  46:     addi C, 3, C
05b: 804f ;                    --  47:     jmp tictactoe_testWin_for2
05c: 0801 0001 ;               --  49:     mov 1, A
05e: 3180 ;                    --  50:     ret
05f: 6402 ;                    --  52:     subi B, 2, B
060: 2a02 ;                    --  53:     jez tictactoe_testWin_for1end
061: 4403 ;                    --  54:     addi B, 3, B
062: 804e ;                    --  55:     jmp tictactoe_testWin_for1
063: 0002 ;                    --  59:     mov 0, B
064: 0003 ;                    --  62:     mov 0, C
065: 08b9 0003 ;               --  65:     mll 3, C, A
067: 0211 ;                    --  66:     add A, B, A
068: 0e09 0005 ;               --  67:     add [5], A, A
06a: 0c01 ;                    --  68:     mov *A, A
06b: 0e49 0006 ;               --  69:     sub [6], A, A
06d: 2204 ;                    --  70:     jnz tictactoe_testWin_for4_end
06e: 6602 ;                    --  72:     subi C, 2, C
06f: 2aec ;                    --  73:     jez tictactoe_testWin_retTrue
070: 4603 ;                    --  74:     addi C, 3, C
071: 8065 ;                    --  75:     jmp tictactoe_testWin_for4
072: 6402 ;                    --  77:     subi B, 2, B
073: 2a02 ;                    --  78:     jez tictactoe_testWin_for3end
074: 4403 ;                    --  79:     addi B, 3, B
075: 8064 ;                    --  80:     jmp tictactoe_testWin_for3
076: 0003 ;                    --  84:     mov 0, C
077: 1612 ;                    --  87:     lshi C, 2, A
078: 0e09 0005 ;               --  88:     add [5], A, A
07a: 0c01 ;                    --  89:     mov *A, A
07b: 0e49 0006 ;               --  90:     sub [6], A, A
07d: 2204 ;                    --  91:     jnz tictactoe_testWin_for5_end
07e: 6602 ;                    --  93:     subi C, 2, C
07f: 2adc ;                    --  94:     jez tictactoe_testWin_retTrue
080: 4603 ;                    --  95:     addi C, 3, C
081: 8077 ;                    --  96:     jmp tictactoe_testWin_for5
082: 0003 ;                    --  99:     mov 0, C
083: 1611 ;                    -- 102:     lshi C, 1, A
084: 4202 ;                    -- 103:     addi A, 2, A
085: 0e09 0005 ;               -- 104:     add [5], A, A
087: 0c01 ;                    -- 105:     mov *A, A
088: 0e49 0006 ;               -- 106:     sub [6], A, A
08a: 2204 ;                    -- 107:     jnz tictactoe_testWin_for6_end
08b: 6602 ;                    -- 109:     subi C, 2, C
08c: 2acf ;                    -- 110:     jez tictactoe_testWin_retTrue
08d: 4603 ;                    -- 111:     addi C, 3, C
08e: 8083 ;                    -- 112:     jmp tictactoe_testWin_for6
08f: 0001 ;                    -- 114:     mov 0, A
090: 3180 ;                    -- 115:     ret
091: 2f80 0004 ;               -- 119:     save [4], @0
093: 0003 ;                    -- 121:     mov 0, C
094: 0e19 0005 ;               -- 123:     add [5], C, A
096: 0c00 ;                    -- 124:     mov *A, 0
097: 2a04 ;                    -- 125:     jez tictactoe_gameOver_for1_end
098: 6608 ;                    -- 126:     subi C, 8, C
099: 2a19 ;                    -- 127:     jez tictactoe_gameOver_retTrue
09a: 4609 ;                    -- 128:     addi C, 9, C
09b: 8094 ;                    -- 129:     jmp tictactoe_gameOver_for1
09c: 3800 0001 ;               -- 131:     push 1
09e: 3e00 0005 ;               -- 132:     push [5]
0a0: 3e00 0004 ;               -- 133:     push [4]
0a2: 3100 ;                    -- 134:     call tictactoe_testWin
0a3: 804b ;                    -- 134:     call tictactoe_testWin
0a4: 4003 ;                    -- 135:     addi SP, 3, SP
0a5: 0200 ;                    -- 136:     mov A, 0
0a6: 220c ;                    -- 137:     jnz tictactoe_gameOver_retTrue
0a7: 3800 0002 ;               -- 138:     push 2
0a9: 3e00 0005 ;               -- 139:     push [5]
0ab: 3e00 0004 ;               -- 140:     push [4]
0ad: 3100 ;                    -- 141:     call tictactoe_testWin
0ae: 804b ;                    -- 141:     call tictactoe_testWin
0af: 4003 ;                    -- 142:     addi SP, 3, SP
0b0: 0200 ;                    -- 143:     mov A, 0
0b1: 2201 ;                    -- 144:     jnz tictactoe_gameOver_retTrue
0b2: 3180 ;                    -- 145:     ret
0b3: 0801 0001 ;               -- 147:     mov 1, A
0b5: 3180 ;                    -- 148:     ret
0b6: 3e00 0005 ;               -- 156:     push [5]
0b8: 3e00 0004 ;               -- 157:     push [4]
0ba: 3100 ;                    -- 158:     call tictactoe_gameOver
0bb: 8091 ;                    -- 158:     call tictactoe_gameOver
0bc: 4002 ;                    -- 159:     addi SP, 2, SP
0bd: 0200 ;                    -- 160:     mov A, 0
0be: 2a04 ;                    -- 161:     jez tictactoe_minimax_if1_end
0bf: 0e07 0007 0006 ;          -- 162:     mov [7], [6]
0c2: 802a ;                    -- 163:     jmp tictactoe_scoreGame
0c3: 4e01 0007 0007 ;          -- 165:     addi [7], 1, [7]
0c6: 0a01 1000 0001 ;          -- 166:     mov *allocSize, A
0c9: 080d 0013 1000 0001 ;     -- 167:     add 19, A, *allocSize
0cd: 0809 0800 ;               -- 168:     add allocSpace.l, A, A
0cf: 2980 1000 ;               -- 169:     save allocSpace.h, @0
0d1: 0006 ;                    -- 170:     mov 0, *A
0d2: 3200 ;                    -- 171:     push A ; [0] <= *allocSpace
0d3: 0003 ;                    -- 173:     mov 0, C
0d4: 2f80 0004 ;               -- 175:     save [4], @0
0d6: 0e19 0005 ;               -- 176:     add [5], C, A
0d8: 0c00 ;                    -- 177:     mov *A, 0
0d9: 2229 ;                    -- 178:     jnz tictactoe_minimax_if2_end
0da: 2980 1000 ;               -- 179:     save allocSpace.h, @0
0dc: 0e01 0000 ;               -- 180:     mov [0], A
0de: 4c01 ;                    -- 181:     addi *A, 1, *A
0df: 0c09 ;                    -- 182:     add *A, A, A
0e0: 0606 ;                    -- 183:     mov C, *A
0e1: 2f80 0004 ;               -- 184:     save [4], @0
0e3: 0e19 0005 ;               -- 185:     add [5], C, A
0e5: 0e06 0006 ;               -- 186:     mov [6], *A
0e7: 3600 ;                    -- 187:     push C
0e8: 3e00 0007 ;               -- 189:     push [7]
0ea: 0e02 0006 ;               -- 190:     mov [6], B
0ec: 6503 ;                    -- 191:     xori B, 03h, B
0ed: 3400 ;                    -- 192:     push B
0ee: 3e00 0005 ;               -- 193:     push [5]
0f0: 3e00 0004 ;               -- 194:     push [4]
0f2: 3100 ;                    -- 195:     call tictactoe_minimax
0f3: 80b6 ;                    -- 195:     call tictactoe_minimax
0f4: 4004 ;                    -- 196:     addi SP, 4, SP
0f5: 0202 ;                    -- 198:     mov A, B
0f6: 3680 ;                    -- 199:     pop C
0f7: 2980 1000 ;               -- 200:     save allocSpace.h, @0
0f9: 0e01 0000 ;               -- 201:     mov [0], A
0fb: 0c09 ;                    -- 202:     add *A, A, A
0fc: 4209 ;                    -- 203:     addi A, 9, A
0fd: 0406 ;                    -- 204:     mov B, *A
0fe: 2f80 0004 ;               -- 205:     save [4], @0
100: 0e19 0005 ;               -- 206:     add [5], C, A
102: 0006 ;                    -- 207:     mov 0, *A
103: 6608 ;                    -- 209:     subi C, 8, C
104: 2a02 ;                    -- 210:     jez tictactoe_minimax_for1_end
105: 4609 ;                    -- 211:     addi C, 9, C
106: 80d4 ;                    -- 212:     jmp tictactoe_minimax_for1
107: 2980 1000 ;               -- 215:     save allocSpace.h, @0
109: 3000 ;                    -- 216:     push 0 ; [-1] <= minimax = 0
10a: 4601 ;                    -- 218:     addi C, 1, C
10b: 0e02 0006 ;               -- 219:     mov [6], B
10d: 6402 ;                    -- 220:     subi B, 2, B
10e: 2a24 ;                    -- 221:     jez tictactoe_minimax_findMin
10f: 0e01 0000 ;               -- 224:     mov [0], A
111: 0c02 ;                    -- 225:     mov *A, B
112: 0650 ;                    -- 226:     sub C, B, 0
113: 2a0e ;                    -- 227:     jez tictactoe_minimax_findMax_for_end
114: 0e01 0000 ;               -- 228:     mov [0], A
116: 420a ;                    -- 229:     addi A, 10, A
117: 0219 ;                    -- 230:     add A, C, A
118: 0c02 ;                    -- 231:     mov *A, B
119: 0259 ;                    -- 232:     sub A, C, A
11a: 0e09 ffff ;               -- 233:     add [-1], A, A
11c: 0c50 ;                    -- 234:     sub *A, B, 0
11d: 2402 ;                    -- 235:     jge tictactoe_minimax_skipMaxSet
11e: 0607 ffff ;               -- 236:     mov C, [-1]
120: 4601 ;                    -- 238:     addi C, 1, C
121: 810f ;                    -- 239:     jmp tictactoe_minimax_findMax
122: 0e01 0000 ;               -- 241:     mov [0], A
124: 4201 ;                    -- 242:     addi A, 1, A
125: 0e09 ffff ;               -- 243:     add [-1], A, A
127: 0c05 1000 0000 ;          -- 244:     mov *A, *choice
12a: 4209 ;                    -- 245:     addi A, 9, A
12b: 0c01 ;                    -- 246:     mov *A, A
12c: 6a13 1000 0001 1000 0001 ; -- 247:     subi *allocSize, 19, *allocSize
131: 4002 ;                    -- 248:     addi SP, 2, SP
132: 3180 ;                    -- 249:     ret
133: 0e01 0000 ;               -- 253:     mov [0], A
135: 0c02 ;                    -- 254:     mov *A, B
136: 0650 ;                    -- 255:     sub C, B, 0
137: 2a10 ;                    -- 256:     jez tictactoe_minimax_findMin_for_end
138: 0e01 0000 ;               -- 257:     mov [0], A
13a: 420a ;                    -- 258:     addi A, 10, A
13b: 0e09 ffff ;               -- 259:     add [-1], A, A
13d: 0c02 ;                    -- 260:     mov *A, B
13e: 0e01 0000 ;               -- 261:     mov [0], A
140: 420a ;                    -- 262:     addi A, 10, A
141: 0219 ;                    -- 263:     add A, C, A
142: 0c50 ;                    -- 264:     sub *A, B, 0
143: 2402 ;                    -- 265:     jge tictactoe_minimax_skipMinSet
144: 0607 ffff ;               -- 266:     mov C, [-1]
146: 4601 ;                    -- 268:     addi C, 1, C
147: 8133 ;                    -- 269:     jmp tictactoe_minimax_findMin
148: 0e01 0000 ;               -- 271:     mov [0], A
14a: 4201 ;                    -- 272:     addi A, 1, A
14b: 0e09 ffff ;               -- 273:     add [-1], A, A
14d: 0c05 1000 0000 ;          -- 274:     mov *A, *choice
150: 4209 ;                    -- 275:     addi A, 9, A
151: 0c01 ;                    -- 276:     mov *A, A
152: 6a13 1000 0001 1000 0001 ; -- 277:     subi *allocSize, 19, *allocSize
157: 4002 ;                    -- 278:     addi SP, 2, SP
158: 3180 ;                    -- 279:     ret
END;
